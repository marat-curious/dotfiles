set global grepcmd 'rg -Hn'
set global indentwidth 2
set global tabstop 2

colorscheme plain

add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ wrap -word -indent

set-option -add global ui_options terminal_status_on_top=true
set-option -add global ui_options terminal_enable_mouse=false
set-option -add global ui_options terminal_assistant=off

# hook global WinCreate ^[^*]+$ %{editorconfig-load}
hook global BufOpenFile .* %{editorconfig-load}
hook global BufNewFile .* %{editorconfig-load}

set-face global CurSearch +u
set-face global CurWord +b

map global normal '#' :comment-line<ret>

# LSP
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(javascript|typescript) %{lsp-enable-window}

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{execute-keys -with-hooks <lt>tab>}<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
